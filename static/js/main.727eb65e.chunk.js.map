{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["Status","BASE_URL","getUser","userId","fetch","then","response","json","TodoList","state","todos","status","query","handleChange","event","setState","target","value","handleSelect","randomSort","prevState","sort","Math","random","filterTodos","filter","todo","active","completed","title","toLowerCase","includes","a","this","props","selectedUserId","selectUser","filteredTodos","className","type","placeholder","onChange","disabled","onClick","length","map","checked","id","React","Component","CurrentUser","user","loadUser","prevProps","name","email","phone","clear","App","clearUser","ReactDOM","render","document","getElementById"],"mappings":"gPAIKA,E,iGCJCC,G,MAAW,qCAOJC,EAAU,SAACC,GACtB,OAAOC,MAAM,GAAD,OAAIH,EAAJ,kBAAsBE,IAC/BE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,W,iBDL1BP,K,UAAAA,E,gBAAAA,E,uBAAAA,M,KAiBE,IAAMQ,EAAb,4MACEC,MAAe,CACbC,MAAO,GACPC,OAAQ,MACRC,MAAO,IAJX,EAaEC,aAAe,SAACC,GACd,EAAKC,SAAS,CAAEH,MAAOE,EAAME,OAAOC,SAdxC,EAiBEC,aAAe,SAACJ,GACd,EAAKC,SAAS,CAAEJ,OAAQG,EAAME,OAAOC,SAlBzC,EAqBEE,WAAa,WACX,EAAKJ,UAAS,SAACK,GAAD,MAAgB,CAC5BV,MAAOU,EAAUV,MAAMW,MAAK,kBAAMC,KAAKC,SAAW,WAvBxD,EA2BEC,YAAc,WACZ,MAAiC,EAAKf,MAA9BC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,OAAQC,EAAvB,EAAuBA,MAYvB,OAXsBF,EAAMe,QAAO,SAAAC,GACjC,OAAQf,GACN,KAAKX,EAAO2B,OACV,OAAQD,EAAKE,UACf,KAAK5B,EAAO4B,UACV,OAAOF,EAAKE,UACd,QACE,OAAOF,MAIQD,QAAO,SAAAC,GAAI,OAC9BA,EAAKG,OACFH,EAAKG,MAAMC,cAAcC,SAASnB,EAAMkB,mBA1CjD,8FAOE,4BAAAE,EAAA,sECzBO5B,MAAM,GAAD,OAAIH,EAAJ,WACTI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UDwB7B,OACQG,EADR,OAGEuB,KAAKlB,SAAS,CAAEL,UAHlB,gDAPF,0EA6CE,WACE,MAGIuB,KAAKxB,MAFPE,EADF,EACEA,OACAC,EAFF,EAEEA,MAEF,EAAuCqB,KAAKC,MAApCC,EAAR,EAAQA,eAAgBC,EAAxB,EAAwBA,WAClBC,EAAgBJ,KAAKT,cAE3B,OACE,sBAAKc,UAAU,WAAf,UACE,wCAEA,sBAAKA,UAAU,iBAAf,UACE,uBACEA,UAAU,iBACVrB,MAAOL,EACP2B,KAAK,OACLC,YAAY,kBACZC,SAAUR,KAAKpB,eAGjB,yBACEyB,UAAU,iBACVG,SAAUR,KAAKf,aACfD,MAAON,EAHT,UAKE,wBAAQM,MAAM,GAAGyB,UAAQ,EAAzB,gCAGA,wBAAQzB,MAAM,MAAd,iBAGA,wBAAQA,MAAM,SAAd,oBAGA,wBAAQA,MAAM,YAAd,0BAKF,wBACEqB,UAAU,SACVC,KAAK,SACLI,QAASV,KAAKd,WAHhB,0BASF,qBAAKmB,UAAU,2BAAf,SACGD,EAAcO,OAAS,GAEpB,oBAAIN,UAAU,iBAAd,SACGD,EAAcQ,KAAI,SAAAnB,GAAI,OACrB,qBAEEY,UACEZ,EAAKE,UACD,yCAA2C,2CAJnD,UAOE,kCACE,uBACEW,KAAK,WACLO,QAASpB,EAAKE,YAEhB,4BAAIF,EAAKG,WAGX,wBACEU,KAAK,SACLD,UAAWH,IAAmBT,EAAKvB,OAC/B,yCAA2C,SAC/CwC,QAAS,kBAAMP,EAAWV,EAAKvB,SAJjC,yBAMYuB,EAAKvB,YApBZuB,EAAKqB,kBApG9B,GAA8BC,IAAMC,WERvBC,G,MAAb,4MACEzC,MAAe,CACb0C,KAAM,MAFV,EAeEC,SAfF,sBAea,4BAAApB,EAAA,sEACU9B,EAAQ,EAAKgC,MAAMC,gBAD7B,OACHgB,EADG,OAGT,EAAKpC,SAAS,CAAEoC,SAHP,2CAfb,uDAKE,WACElB,KAAKmB,aANT,gCASE,SAAmBC,GACbA,EAAUlB,iBAAmBF,KAAKC,MAAMC,gBAC1CF,KAAKmB,aAXX,oBAqBE,WACE,IAAQD,EAASlB,KAAKxB,MAAd0C,KAER,OACEA,GACE,qCACE,sBAAKb,UAAU,cAAf,UACE,oBAAIA,UAAU,qBAAd,SACE,wDAAyBa,EAAKJ,QAGhC,oBAAIT,UAAU,oBAAd,SAAmCa,EAAKG,OACxC,mBAAGhB,UAAU,qBAAb,SAAmCa,EAAKI,QACxC,mBAAGjB,UAAU,qBAAb,SAAmCa,EAAKK,WAG1C,wBACEjB,KAAK,SACLD,UAAU,4BACVK,QAASV,KAAKC,MAAMuB,MAHtB,0BArCV,GAAiCT,IAAMC,YCHjCS,E,4MACJjD,MAAe,CACb0B,eAAgB,G,EAGlBC,WAAa,SAACjC,GACZ,EAAKY,SAAS,CAAEoB,eAAgBhC,K,EAGlCwD,UAAY,WACV,EAAK5C,SAAS,CAAEoB,eAAgB,K,4CAGlC,WACE,IAAQA,EAAmBF,KAAKxB,MAAxB0B,eAER,OACE,sBAAKG,UAAU,MAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CACEH,eAAgBA,EAChBC,WAAYH,KAAKG,eAIrB,qBAAKE,UAAU,eAAf,SACE,qBAAKA,UAAU,yBAAf,SACGH,EACC,cAAC,EAAD,CACAA,eAAgBA,EAChBsB,MAAOxB,KAAK0B,YAEV,8B,GAhCEX,IAAMC,WAwCTS,IC/CfE,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.727eb65e.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport { getTodos } from '../../api/api';\n\nenum Status {\n  all = 'all',\n  active = 'active',\n  completed = 'completed',\n}\n\ntype Props = {\n  selectedUserId: number;\n  selectUser: (userId: number) => void;\n};\n\ntype State = {\n  todos: Todo[];\n  status: Status;\n  query: string;\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    todos: [],\n    status: 'all' as Status,\n    query: '',\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState({ todos });\n  }\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ query: event.target.value });\n  };\n\n  handleSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    this.setState({ status: event.target.value as Status });\n  };\n\n  randomSort = () => {\n    this.setState((prevState) => ({\n      todos: prevState.todos.sort(() => Math.random() - 0.5),\n    }));\n  };\n\n  filterTodos = () => {\n    const { todos, status, query } = this.state;\n    const filteredTodos = todos.filter(todo => {\n      switch (status) {\n        case Status.active:\n          return !todo.completed;\n        case Status.completed:\n          return todo.completed;\n        default:\n          return todo;\n      }\n    });\n\n    return filteredTodos.filter(todo => (\n      todo.title\n      && todo.title.toLowerCase().includes(query.toLowerCase())));\n  };\n\n  render() {\n    const {\n      status,\n      query,\n    } = this.state;\n    const { selectedUserId, selectUser } = this.props;\n    const filteredTodos = this.filterTodos();\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__sort\">\n          <input\n            className=\"TodoList__item\"\n            value={query}\n            type=\"text\"\n            placeholder=\"Search by title\"\n            onChange={this.handleChange}\n          />\n\n          <select\n            className=\"TodoList__item\"\n            onChange={this.handleSelect}\n            value={status}\n          >\n            <option value=\"\" disabled>\n              Choose status type\n            </option>\n            <option value=\"all\">\n              All\n            </option>\n            <option value=\"active\">\n              Active\n            </option>\n            <option value=\"completed\">\n              Completed\n            </option>\n          </select>\n\n          <button\n            className=\"button\"\n            type=\"button\"\n            onClick={this.randomSort}\n          >\n            Randomise\n          </button>\n        </div>\n\n        <div className=\"TodoList__list-container\">\n          {filteredTodos.length > 0\n            && (\n              <ul className=\"TodoList__list\">\n                {filteredTodos.map(todo => (\n                  <li\n                    key={todo.id}\n                    className={\n                      todo.completed\n                        ? 'TodoList__item TodoList__item--checked' : 'TodoList__item TodoList__item--unchecked'\n                    }\n                  >\n                    <label>\n                      <input\n                        type=\"checkbox\"\n                        checked={todo.completed}\n                      />\n                      <p>{todo.title}</p>\n                    </label>\n\n                    <button\n                      type=\"button\"\n                      className={selectedUserId === todo.userId\n                        ? 'button TodoList__user-button--selected' : 'button'}\n                      onClick={() => selectUser(todo.userId)}\n                    >\n                      {`User #${todo.userId}`}\n                    </button>\n                  </li>\n                ))}\n              </ul>\n            )}\n        </div>\n      </div>\n    );\n  }\n}\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport const getTodos = () => {\n  return fetch(`${BASE_URL}/todos`)\n    .then(response => response.json());\n};\n\nexport const getUser = (userId:number) => {\n  return fetch(`${BASE_URL}/users/${userId}`)\n    .then(response => response.json());\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api/api';\n\ntype Props = {\n  selectedUserId: number;\n  clear: () => void;\n};\n\ntype State = {\n  user: User | null;\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  componentDidMount() {\n    this.loadUser();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.selectedUserId !== this.props.selectedUserId) {\n      this.loadUser();\n    }\n  }\n\n  loadUser = async () => {\n    const user = await getUser(this.props.selectedUserId);\n\n    this.setState({ user });\n  };\n\n  render() {\n    const { user } = this.state;\n\n    return (\n      user && (\n        <>\n          <div className=\"CurrentUser\">\n            <h2 className=\"CurrentUser__title\">\n              <span>{`Selected user: ${user.id}`}</span>\n            </h2>\n\n            <h3 className=\"CurrentUser__name\">{user.name}</h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n          </div>\n\n          <button\n            type=\"button\"\n            className=\"button CurrentUser__clear\"\n            onClick={this.props.clear}\n          >\n            Clear\n          </button>\n        </>\n      )\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\ninterface State {\n  selectedUserId: number;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n  };\n\n  selectUser = (userId: number) => {\n    this.setState({ selectedUserId: userId });\n  };\n\n  clearUser = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  render() {\n    const { selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            selectedUserId={selectedUserId}\n            selectUser={this.selectUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser \n              selectedUserId={selectedUserId}\n              clear={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}